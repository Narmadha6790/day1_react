Let and Const
Arrow functions
Default parameters
for of loop
Spread attributes
Maps
Sets

Let and Const
let a = 50;
let b = 100;
if (true) {
 let a = 60;
 var c = 10;
 console.log(a/c); // 6
 console.log(b/c); // 10
}
console.log(c); // 10
console.log(a); // 50

Const

const a = 50;
a = 60; // shows error. You cannot change the value of const.

const b = "Constant variable";
b = "Assigning new value"; // shows error.

const LANGUAGES = ['Js', 'Ruby', 'Python', 'Go'];

LANGUAGES = "Javascript"; // shows error. 

LANGUAGES.push('Java'); // Works fine.
console.log(LANGUAGES); // ['Js', 'Ruby', 'Python', 'Go', 'Java']


Arrow functions

// Old Syntax
function oldOne() {
 console.log("Hello World..!");
}

// New Syntax

var newOne = () => {
 console.log("Hello World..!");
}

let NewOneWithParameters = (a, b) => {
 console.log(a+b); // 30
}
NewOneWithParameters(10, 20);

let Func = (a, b = 10) => {
 return a + b; 
}
Func(20); // 20 + 10 = 30


For of loop

let arr = [2,3,4,1];
for (let value of arr) {
 console.log(value);
}

let string = "Javascript";
for (let char of string) {
 console.log(char);
}

mAP
var NewMap = new Map();
NewMap.set('name', 'John'); 
NewMap.set('id', 2345796);
NewMap.set('interest', ['js', 'ruby', 'python']);

NewMap.get('name'); // John
NewMap.get('id'); // 2345796
NewMap.get('interest'); // ['js', 'ruby', 'python']

var sets = New Set([1,5,6,8,9]);

sets.size; // returns 5. Size of the size.
sets.has(1); // returns true. 
sets.has(10); // returns false.

Classes

static function

class Example {
 static Callme() {
 console.log("Static method");
 }
}
Example.Callme();


getters & setters

class People {

constructor(name) {
      this.name = name;
    }
    getName() {
      return this.name;
    }
    setName(name) {
      this.name = name;
    }
}

let person = new People("Jon Snow");
console.log(person.getName());
person.setName("Dany");
console.log(person.getName());